// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler).
// This file is meant to be re-generated in place and/or deleted at any time.

package order_dao

import (
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// OrderCombination is an object representing the database table.
type OrderCombination struct {
	ID              string      `boil:"id" json:"id" toml:"id" yaml:"id"`
	StoreID         null.String `boil:"store_id" json:"store_id,omitempty" toml:"store_id" yaml:"store_id,omitempty"`
	SubOrderID      string      `boil:"sub_order_id" json:"sub_order_id" toml:"sub_order_id" yaml:"sub_order_id"`
	OuterOrderID    null.String `boil:"outer_order_id" json:"outer_order_id,omitempty" toml:"outer_order_id" yaml:"outer_order_id,omitempty"`
	CartID          null.String `boil:"cart_id" json:"cart_id,omitempty" toml:"cart_id" yaml:"cart_id,omitempty"`
	CreateTimestamp time.Time   `boil:"create_timestamp" json:"create_timestamp" toml:"create_timestamp" yaml:"create_timestamp"`
	UpdateTimestamp time.Time   `boil:"update_timestamp" json:"update_timestamp" toml:"update_timestamp" yaml:"update_timestamp"`
	CreateUser      null.String `boil:"create_user" json:"create_user,omitempty" toml:"create_user" yaml:"create_user,omitempty"`
	UpdateUser      null.String `boil:"update_user" json:"update_user,omitempty" toml:"update_user" yaml:"update_user,omitempty"`

	R *orderCombinationR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L orderCombinationL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var OrderCombinationColumns = struct {
	ID              string
	StoreID         string
	SubOrderID      string
	OuterOrderID    string
	CartID          string
	CreateTimestamp string
	UpdateTimestamp string
	CreateUser      string
	UpdateUser      string
}{
	ID:              "id",
	StoreID:         "store_id",
	SubOrderID:      "sub_order_id",
	OuterOrderID:    "outer_order_id",
	CartID:          "cart_id",
	CreateTimestamp: "create_timestamp",
	UpdateTimestamp: "update_timestamp",
	CreateUser:      "create_user",
	UpdateUser:      "update_user",
}

var OrderCombinationTableColumns = struct {
	ID              string
	StoreID         string
	SubOrderID      string
	OuterOrderID    string
	CartID          string
	CreateTimestamp string
	UpdateTimestamp string
	CreateUser      string
	UpdateUser      string
}{
	ID:              "order_combination.id",
	StoreID:         "order_combination.store_id",
	SubOrderID:      "order_combination.sub_order_id",
	OuterOrderID:    "order_combination.outer_order_id",
	CartID:          "order_combination.cart_id",
	CreateTimestamp: "order_combination.create_timestamp",
	UpdateTimestamp: "order_combination.update_timestamp",
	CreateUser:      "order_combination.create_user",
	UpdateUser:      "order_combination.update_user",
}

// Generated where

var OrderCombinationWhere = struct {
	ID              whereHelperstring
	StoreID         whereHelpernull_String
	SubOrderID      whereHelperstring
	OuterOrderID    whereHelpernull_String
	CartID          whereHelpernull_String
	CreateTimestamp whereHelpertime_Time
	UpdateTimestamp whereHelpertime_Time
	CreateUser      whereHelpernull_String
	UpdateUser      whereHelpernull_String
}{
	ID:              whereHelperstring{field: "\"order_combination\".\"id\""},
	StoreID:         whereHelpernull_String{field: "\"order_combination\".\"store_id\""},
	SubOrderID:      whereHelperstring{field: "\"order_combination\".\"sub_order_id\""},
	OuterOrderID:    whereHelpernull_String{field: "\"order_combination\".\"outer_order_id\""},
	CartID:          whereHelpernull_String{field: "\"order_combination\".\"cart_id\""},
	CreateTimestamp: whereHelpertime_Time{field: "\"order_combination\".\"create_timestamp\""},
	UpdateTimestamp: whereHelpertime_Time{field: "\"order_combination\".\"update_timestamp\""},
	CreateUser:      whereHelpernull_String{field: "\"order_combination\".\"create_user\""},
	UpdateUser:      whereHelpernull_String{field: "\"order_combination\".\"update_user\""},
}

// OrderCombinationRels is where relationship names are stored.
var OrderCombinationRels = struct {
}{}

// orderCombinationR is where relationships are stored.
type orderCombinationR struct {
}

// NewStruct creates a new relationship struct
func (*orderCombinationR) NewStruct() *orderCombinationR {
	return &orderCombinationR{}
}

// orderCombinationL is where Load methods for each relationship are stored.
type orderCombinationL struct{}

var (
	orderCombinationAllColumns            = []string{"id", "store_id", "sub_order_id", "outer_order_id", "cart_id", "create_timestamp", "update_timestamp", "create_user", "update_user"}
	orderCombinationColumnsWithoutDefault = []string{"id", "sub_order_id"}
	orderCombinationColumnsWithDefault    = []string{"store_id", "outer_order_id", "cart_id", "create_timestamp", "update_timestamp", "create_user", "update_user"}
	orderCombinationPrimaryKeyColumns     = []string{"id", "sub_order_id"}
	orderCombinationGeneratedColumns      = []string{}
)

type (
	// OrderCombinationSlice is an alias for a slice of pointers to OrderCombination.
	// This should almost always be used instead of []OrderCombination.
	OrderCombinationSlice []*OrderCombination

	orderCombinationQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	orderCombinationType                 = reflect.TypeOf(&OrderCombination{})
	orderCombinationMapping              = queries.MakeStructMapping(orderCombinationType)
	orderCombinationPrimaryKeyMapping, _ = queries.BindMapping(orderCombinationType, orderCombinationMapping, orderCombinationPrimaryKeyColumns)
	orderCombinationInsertCacheMut       sync.RWMutex
	orderCombinationInsertCache          = make(map[string]insertCache)
	orderCombinationUpdateCacheMut       sync.RWMutex
	orderCombinationUpdateCache          = make(map[string]updateCache)
	orderCombinationUpsertCacheMut       sync.RWMutex
	orderCombinationUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single orderCombination record from the query.
func (q orderCombinationQuery) One(exec boil.Executor) (*OrderCombination, error) {
	o := &OrderCombination{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "order_dao: failed to execute a one query for order_combination")
	}

	return o, nil
}

// All returns all OrderCombination records from the query.
func (q orderCombinationQuery) All(exec boil.Executor) (OrderCombinationSlice, error) {
	var o []*OrderCombination

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "order_dao: failed to assign all query results to OrderCombination slice")
	}

	return o, nil
}

// Count returns the count of all OrderCombination records in the query.
func (q orderCombinationQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "order_dao: failed to count order_combination rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q orderCombinationQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "order_dao: failed to check if order_combination exists")
	}

	return count > 0, nil
}

// OrderCombinations retrieves all the records using an executor.
func OrderCombinations(mods ...qm.QueryMod) orderCombinationQuery {
	mods = append(mods, qm.From("\"order_combination\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"order_combination\".*"})
	}

	return orderCombinationQuery{q}
}

// FindOrderCombination retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindOrderCombination(exec boil.Executor, iD string, subOrderID string, selectCols ...string) (*OrderCombination, error) {
	orderCombinationObj := &OrderCombination{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"order_combination\" where \"id\"=$1 AND \"sub_order_id\"=$2", sel,
	)

	q := queries.Raw(query, iD, subOrderID)

	err := q.Bind(nil, exec, orderCombinationObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "order_dao: unable to select from order_combination")
	}

	return orderCombinationObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *OrderCombination) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("order_dao: no order_combination provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(orderCombinationColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	orderCombinationInsertCacheMut.RLock()
	cache, cached := orderCombinationInsertCache[key]
	orderCombinationInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			orderCombinationAllColumns,
			orderCombinationColumnsWithDefault,
			orderCombinationColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(orderCombinationType, orderCombinationMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(orderCombinationType, orderCombinationMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"order_combination\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"order_combination\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "order_dao: unable to insert into order_combination")
	}

	if !cached {
		orderCombinationInsertCacheMut.Lock()
		orderCombinationInsertCache[key] = cache
		orderCombinationInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the OrderCombination.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *OrderCombination) Update(exec boil.Executor, columns boil.Columns) error {
	var err error
	key := makeCacheKey(columns, nil)
	orderCombinationUpdateCacheMut.RLock()
	cache, cached := orderCombinationUpdateCache[key]
	orderCombinationUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			orderCombinationAllColumns,
			orderCombinationPrimaryKeyColumns,
		)
		if len(wl) == 0 {
			return errors.New("order_dao: unable to update order_combination, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"order_combination\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, orderCombinationPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(orderCombinationType, orderCombinationMapping, append(wl, orderCombinationPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err = exec.Exec(cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "order_dao: unable to update order_combination row")
	}

	if !cached {
		orderCombinationUpdateCacheMut.Lock()
		orderCombinationUpdateCache[key] = cache
		orderCombinationUpdateCacheMut.Unlock()
	}

	return nil
}

// UpdateAll updates all rows with the specified column values.
func (q orderCombinationQuery) UpdateAll(exec boil.Executor, cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.Exec(exec)
	if err != nil {
		return errors.Wrap(err, "order_dao: unable to update all for order_combination")
	}

	return nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o OrderCombinationSlice) UpdateAll(exec boil.Executor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("order_dao: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), orderCombinationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"order_combination\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, orderCombinationPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "order_dao: unable to update all in orderCombination slice")
	}

	return nil
}

// Delete deletes a single OrderCombination record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *OrderCombination) Delete(exec boil.Executor) error {
	if o == nil {
		return errors.New("order_dao: no OrderCombination provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), orderCombinationPrimaryKeyMapping)
	sql := "DELETE FROM \"order_combination\" WHERE \"id\"=$1 AND \"sub_order_id\"=$2"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "order_dao: unable to delete from order_combination")
	}

	return nil
}

// DeleteAll deletes all matching rows.
func (q orderCombinationQuery) DeleteAll(exec boil.Executor) error {
	if q.Query == nil {
		return errors.New("order_dao: no orderCombinationQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.Exec(exec)
	if err != nil {
		return errors.Wrap(err, "order_dao: unable to delete all from order_combination")
	}

	return nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o OrderCombinationSlice) DeleteAll(exec boil.Executor) error {
	if len(o) == 0 {
		return nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), orderCombinationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"order_combination\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, orderCombinationPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "order_dao: unable to delete all from orderCombination slice")
	}

	return nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *OrderCombination) Reload(exec boil.Executor) error {
	ret, err := FindOrderCombination(exec, o.ID, o.SubOrderID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *OrderCombinationSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := OrderCombinationSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), orderCombinationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"order_combination\".* FROM \"order_combination\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, orderCombinationPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "order_dao: unable to reload all in OrderCombinationSlice")
	}

	*o = slice

	return nil
}

// OrderCombinationExists checks if the OrderCombination row exists.
func OrderCombinationExists(exec boil.Executor, iD string, subOrderID string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"order_combination\" where \"id\"=$1 AND \"sub_order_id\"=$2 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD, subOrderID)
	}
	row := exec.QueryRow(sql, iD, subOrderID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "order_dao: unable to check if order_combination exists")
	}

	return exists, nil
}

// Exists checks if the OrderCombination row exists.
func (o *OrderCombination) Exists(exec boil.Executor) (bool, error) {
	return OrderCombinationExists(exec, o.ID, o.SubOrderID)
}
