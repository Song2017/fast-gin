// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler).
// This file is meant to be re-generated in place and/or deleted at any time.

package order_dao

import (
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// OrderDeliveryDetail is an object representing the database table.
type OrderDeliveryDetail struct {
	ID       int         `boil:"id" json:"id" toml:"id" yaml:"id"`
	OrderID  null.String `boil:"order_id" json:"order_id,omitempty" toml:"order_id" yaml:"order_id,omitempty"`
	Country  null.String `boil:"country" json:"country,omitempty" toml:"country" yaml:"country,omitempty"`
	Province null.String `boil:"province" json:"province,omitempty" toml:"province" yaml:"province,omitempty"`
	City     null.String `boil:"city" json:"city,omitempty" toml:"city" yaml:"city,omitempty"`
	District null.String `boil:"district" json:"district,omitempty" toml:"district" yaml:"district,omitempty"`
	Zipcode  null.String `boil:"zipcode" json:"zipcode,omitempty" toml:"zipcode" yaml:"zipcode,omitempty"`

	R *orderDeliveryDetailR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L orderDeliveryDetailL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var OrderDeliveryDetailColumns = struct {
	ID       string
	OrderID  string
	Country  string
	Province string
	City     string
	District string
	Zipcode  string
}{
	ID:       "id",
	OrderID:  "order_id",
	Country:  "country",
	Province: "province",
	City:     "city",
	District: "district",
	Zipcode:  "zipcode",
}

var OrderDeliveryDetailTableColumns = struct {
	ID       string
	OrderID  string
	Country  string
	Province string
	City     string
	District string
	Zipcode  string
}{
	ID:       "order_delivery_detail.id",
	OrderID:  "order_delivery_detail.order_id",
	Country:  "order_delivery_detail.country",
	Province: "order_delivery_detail.province",
	City:     "order_delivery_detail.city",
	District: "order_delivery_detail.district",
	Zipcode:  "order_delivery_detail.zipcode",
}

// Generated where

var OrderDeliveryDetailWhere = struct {
	ID       whereHelperint
	OrderID  whereHelpernull_String
	Country  whereHelpernull_String
	Province whereHelpernull_String
	City     whereHelpernull_String
	District whereHelpernull_String
	Zipcode  whereHelpernull_String
}{
	ID:       whereHelperint{field: "\"order_delivery_detail\".\"id\""},
	OrderID:  whereHelpernull_String{field: "\"order_delivery_detail\".\"order_id\""},
	Country:  whereHelpernull_String{field: "\"order_delivery_detail\".\"country\""},
	Province: whereHelpernull_String{field: "\"order_delivery_detail\".\"province\""},
	City:     whereHelpernull_String{field: "\"order_delivery_detail\".\"city\""},
	District: whereHelpernull_String{field: "\"order_delivery_detail\".\"district\""},
	Zipcode:  whereHelpernull_String{field: "\"order_delivery_detail\".\"zipcode\""},
}

// OrderDeliveryDetailRels is where relationship names are stored.
var OrderDeliveryDetailRels = struct {
}{}

// orderDeliveryDetailR is where relationships are stored.
type orderDeliveryDetailR struct {
}

// NewStruct creates a new relationship struct
func (*orderDeliveryDetailR) NewStruct() *orderDeliveryDetailR {
	return &orderDeliveryDetailR{}
}

// orderDeliveryDetailL is where Load methods for each relationship are stored.
type orderDeliveryDetailL struct{}

var (
	orderDeliveryDetailAllColumns            = []string{"id", "order_id", "country", "province", "city", "district", "zipcode"}
	orderDeliveryDetailColumnsWithoutDefault = []string{}
	orderDeliveryDetailColumnsWithDefault    = []string{"id", "order_id", "country", "province", "city", "district", "zipcode"}
	orderDeliveryDetailPrimaryKeyColumns     = []string{"id"}
	orderDeliveryDetailGeneratedColumns      = []string{}
)

type (
	// OrderDeliveryDetailSlice is an alias for a slice of pointers to OrderDeliveryDetail.
	// This should almost always be used instead of []OrderDeliveryDetail.
	OrderDeliveryDetailSlice []*OrderDeliveryDetail

	orderDeliveryDetailQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	orderDeliveryDetailType                 = reflect.TypeOf(&OrderDeliveryDetail{})
	orderDeliveryDetailMapping              = queries.MakeStructMapping(orderDeliveryDetailType)
	orderDeliveryDetailPrimaryKeyMapping, _ = queries.BindMapping(orderDeliveryDetailType, orderDeliveryDetailMapping, orderDeliveryDetailPrimaryKeyColumns)
	orderDeliveryDetailInsertCacheMut       sync.RWMutex
	orderDeliveryDetailInsertCache          = make(map[string]insertCache)
	orderDeliveryDetailUpdateCacheMut       sync.RWMutex
	orderDeliveryDetailUpdateCache          = make(map[string]updateCache)
	orderDeliveryDetailUpsertCacheMut       sync.RWMutex
	orderDeliveryDetailUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single orderDeliveryDetail record from the query.
func (q orderDeliveryDetailQuery) One(exec boil.Executor) (*OrderDeliveryDetail, error) {
	o := &OrderDeliveryDetail{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "order_dao: failed to execute a one query for order_delivery_detail")
	}

	return o, nil
}

// All returns all OrderDeliveryDetail records from the query.
func (q orderDeliveryDetailQuery) All(exec boil.Executor) (OrderDeliveryDetailSlice, error) {
	var o []*OrderDeliveryDetail

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "order_dao: failed to assign all query results to OrderDeliveryDetail slice")
	}

	return o, nil
}

// Count returns the count of all OrderDeliveryDetail records in the query.
func (q orderDeliveryDetailQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "order_dao: failed to count order_delivery_detail rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q orderDeliveryDetailQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "order_dao: failed to check if order_delivery_detail exists")
	}

	return count > 0, nil
}

// OrderDeliveryDetails retrieves all the records using an executor.
func OrderDeliveryDetails(mods ...qm.QueryMod) orderDeliveryDetailQuery {
	mods = append(mods, qm.From("\"order_delivery_detail\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"order_delivery_detail\".*"})
	}

	return orderDeliveryDetailQuery{q}
}

// FindOrderDeliveryDetail retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindOrderDeliveryDetail(exec boil.Executor, iD int, selectCols ...string) (*OrderDeliveryDetail, error) {
	orderDeliveryDetailObj := &OrderDeliveryDetail{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"order_delivery_detail\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, orderDeliveryDetailObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "order_dao: unable to select from order_delivery_detail")
	}

	return orderDeliveryDetailObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *OrderDeliveryDetail) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("order_dao: no order_delivery_detail provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(orderDeliveryDetailColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	orderDeliveryDetailInsertCacheMut.RLock()
	cache, cached := orderDeliveryDetailInsertCache[key]
	orderDeliveryDetailInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			orderDeliveryDetailAllColumns,
			orderDeliveryDetailColumnsWithDefault,
			orderDeliveryDetailColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(orderDeliveryDetailType, orderDeliveryDetailMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(orderDeliveryDetailType, orderDeliveryDetailMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"order_delivery_detail\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"order_delivery_detail\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "order_dao: unable to insert into order_delivery_detail")
	}

	if !cached {
		orderDeliveryDetailInsertCacheMut.Lock()
		orderDeliveryDetailInsertCache[key] = cache
		orderDeliveryDetailInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the OrderDeliveryDetail.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *OrderDeliveryDetail) Update(exec boil.Executor, columns boil.Columns) error {
	var err error
	key := makeCacheKey(columns, nil)
	orderDeliveryDetailUpdateCacheMut.RLock()
	cache, cached := orderDeliveryDetailUpdateCache[key]
	orderDeliveryDetailUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			orderDeliveryDetailAllColumns,
			orderDeliveryDetailPrimaryKeyColumns,
		)
		if len(wl) == 0 {
			return errors.New("order_dao: unable to update order_delivery_detail, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"order_delivery_detail\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, orderDeliveryDetailPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(orderDeliveryDetailType, orderDeliveryDetailMapping, append(wl, orderDeliveryDetailPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err = exec.Exec(cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "order_dao: unable to update order_delivery_detail row")
	}

	if !cached {
		orderDeliveryDetailUpdateCacheMut.Lock()
		orderDeliveryDetailUpdateCache[key] = cache
		orderDeliveryDetailUpdateCacheMut.Unlock()
	}

	return nil
}

// UpdateAll updates all rows with the specified column values.
func (q orderDeliveryDetailQuery) UpdateAll(exec boil.Executor, cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.Exec(exec)
	if err != nil {
		return errors.Wrap(err, "order_dao: unable to update all for order_delivery_detail")
	}

	return nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o OrderDeliveryDetailSlice) UpdateAll(exec boil.Executor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("order_dao: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), orderDeliveryDetailPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"order_delivery_detail\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, orderDeliveryDetailPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "order_dao: unable to update all in orderDeliveryDetail slice")
	}

	return nil
}

// Delete deletes a single OrderDeliveryDetail record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *OrderDeliveryDetail) Delete(exec boil.Executor) error {
	if o == nil {
		return errors.New("order_dao: no OrderDeliveryDetail provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), orderDeliveryDetailPrimaryKeyMapping)
	sql := "DELETE FROM \"order_delivery_detail\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "order_dao: unable to delete from order_delivery_detail")
	}

	return nil
}

// DeleteAll deletes all matching rows.
func (q orderDeliveryDetailQuery) DeleteAll(exec boil.Executor) error {
	if q.Query == nil {
		return errors.New("order_dao: no orderDeliveryDetailQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.Exec(exec)
	if err != nil {
		return errors.Wrap(err, "order_dao: unable to delete all from order_delivery_detail")
	}

	return nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o OrderDeliveryDetailSlice) DeleteAll(exec boil.Executor) error {
	if len(o) == 0 {
		return nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), orderDeliveryDetailPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"order_delivery_detail\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, orderDeliveryDetailPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "order_dao: unable to delete all from orderDeliveryDetail slice")
	}

	return nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *OrderDeliveryDetail) Reload(exec boil.Executor) error {
	ret, err := FindOrderDeliveryDetail(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *OrderDeliveryDetailSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := OrderDeliveryDetailSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), orderDeliveryDetailPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"order_delivery_detail\".* FROM \"order_delivery_detail\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, orderDeliveryDetailPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "order_dao: unable to reload all in OrderDeliveryDetailSlice")
	}

	*o = slice

	return nil
}

// OrderDeliveryDetailExists checks if the OrderDeliveryDetail row exists.
func OrderDeliveryDetailExists(exec boil.Executor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"order_delivery_detail\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "order_dao: unable to check if order_delivery_detail exists")
	}

	return exists, nil
}

// Exists checks if the OrderDeliveryDetail row exists.
func (o *OrderDeliveryDetail) Exists(exec boil.Executor) (bool, error) {
	return OrderDeliveryDetailExists(exec, o.ID)
}
