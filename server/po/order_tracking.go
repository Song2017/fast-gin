// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler).
// This file is meant to be re-generated in place and/or deleted at any time.

package order_dao

import (
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// OrderTracking is an object representing the database table.
type OrderTracking struct {
	ID              int64       `boil:"id" json:"id" toml:"id" yaml:"id"`
	OrderID         string      `boil:"order_id" json:"order_id" toml:"order_id" yaml:"order_id"`
	Type            string      `boil:"type" json:"type" toml:"type" yaml:"type"`
	Extend          null.String `boil:"extend" json:"extend,omitempty" toml:"extend" yaml:"extend,omitempty"`
	CreateTimestamp time.Time   `boil:"create_timestamp" json:"create_timestamp" toml:"create_timestamp" yaml:"create_timestamp"`
	UpdateTimestamp time.Time   `boil:"update_timestamp" json:"update_timestamp" toml:"update_timestamp" yaml:"update_timestamp"`
	Operator        null.String `boil:"operator" json:"operator,omitempty" toml:"operator" yaml:"operator,omitempty"`

	R *orderTrackingR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L orderTrackingL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var OrderTrackingColumns = struct {
	ID              string
	OrderID         string
	Type            string
	Extend          string
	CreateTimestamp string
	UpdateTimestamp string
	Operator        string
}{
	ID:              "id",
	OrderID:         "order_id",
	Type:            "type",
	Extend:          "extend",
	CreateTimestamp: "create_timestamp",
	UpdateTimestamp: "update_timestamp",
	Operator:        "operator",
}

var OrderTrackingTableColumns = struct {
	ID              string
	OrderID         string
	Type            string
	Extend          string
	CreateTimestamp string
	UpdateTimestamp string
	Operator        string
}{
	ID:              "order_tracking.id",
	OrderID:         "order_tracking.order_id",
	Type:            "order_tracking.type",
	Extend:          "order_tracking.extend",
	CreateTimestamp: "order_tracking.create_timestamp",
	UpdateTimestamp: "order_tracking.update_timestamp",
	Operator:        "order_tracking.operator",
}

// Generated where

var OrderTrackingWhere = struct {
	ID              whereHelperint64
	OrderID         whereHelperstring
	Type            whereHelperstring
	Extend          whereHelpernull_String
	CreateTimestamp whereHelpertime_Time
	UpdateTimestamp whereHelpertime_Time
	Operator        whereHelpernull_String
}{
	ID:              whereHelperint64{field: "\"order_tracking\".\"id\""},
	OrderID:         whereHelperstring{field: "\"order_tracking\".\"order_id\""},
	Type:            whereHelperstring{field: "\"order_tracking\".\"type\""},
	Extend:          whereHelpernull_String{field: "\"order_tracking\".\"extend\""},
	CreateTimestamp: whereHelpertime_Time{field: "\"order_tracking\".\"create_timestamp\""},
	UpdateTimestamp: whereHelpertime_Time{field: "\"order_tracking\".\"update_timestamp\""},
	Operator:        whereHelpernull_String{field: "\"order_tracking\".\"operator\""},
}

// OrderTrackingRels is where relationship names are stored.
var OrderTrackingRels = struct {
}{}

// orderTrackingR is where relationships are stored.
type orderTrackingR struct {
}

// NewStruct creates a new relationship struct
func (*orderTrackingR) NewStruct() *orderTrackingR {
	return &orderTrackingR{}
}

// orderTrackingL is where Load methods for each relationship are stored.
type orderTrackingL struct{}

var (
	orderTrackingAllColumns            = []string{"id", "order_id", "type", "extend", "create_timestamp", "update_timestamp", "operator"}
	orderTrackingColumnsWithoutDefault = []string{"order_id", "type"}
	orderTrackingColumnsWithDefault    = []string{"id", "extend", "create_timestamp", "update_timestamp", "operator"}
	orderTrackingPrimaryKeyColumns     = []string{"id"}
	orderTrackingGeneratedColumns      = []string{}
)

type (
	// OrderTrackingSlice is an alias for a slice of pointers to OrderTracking.
	// This should almost always be used instead of []OrderTracking.
	OrderTrackingSlice []*OrderTracking

	orderTrackingQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	orderTrackingType                 = reflect.TypeOf(&OrderTracking{})
	orderTrackingMapping              = queries.MakeStructMapping(orderTrackingType)
	orderTrackingPrimaryKeyMapping, _ = queries.BindMapping(orderTrackingType, orderTrackingMapping, orderTrackingPrimaryKeyColumns)
	orderTrackingInsertCacheMut       sync.RWMutex
	orderTrackingInsertCache          = make(map[string]insertCache)
	orderTrackingUpdateCacheMut       sync.RWMutex
	orderTrackingUpdateCache          = make(map[string]updateCache)
	orderTrackingUpsertCacheMut       sync.RWMutex
	orderTrackingUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single orderTracking record from the query.
func (q orderTrackingQuery) One(exec boil.Executor) (*OrderTracking, error) {
	o := &OrderTracking{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "order_dao: failed to execute a one query for order_tracking")
	}

	return o, nil
}

// All returns all OrderTracking records from the query.
func (q orderTrackingQuery) All(exec boil.Executor) (OrderTrackingSlice, error) {
	var o []*OrderTracking

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "order_dao: failed to assign all query results to OrderTracking slice")
	}

	return o, nil
}

// Count returns the count of all OrderTracking records in the query.
func (q orderTrackingQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "order_dao: failed to count order_tracking rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q orderTrackingQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "order_dao: failed to check if order_tracking exists")
	}

	return count > 0, nil
}

// OrderTrackings retrieves all the records using an executor.
func OrderTrackings(mods ...qm.QueryMod) orderTrackingQuery {
	mods = append(mods, qm.From("\"order_tracking\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"order_tracking\".*"})
	}

	return orderTrackingQuery{q}
}

// FindOrderTracking retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindOrderTracking(exec boil.Executor, iD int64, selectCols ...string) (*OrderTracking, error) {
	orderTrackingObj := &OrderTracking{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"order_tracking\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, orderTrackingObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "order_dao: unable to select from order_tracking")
	}

	return orderTrackingObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *OrderTracking) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("order_dao: no order_tracking provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(orderTrackingColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	orderTrackingInsertCacheMut.RLock()
	cache, cached := orderTrackingInsertCache[key]
	orderTrackingInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			orderTrackingAllColumns,
			orderTrackingColumnsWithDefault,
			orderTrackingColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(orderTrackingType, orderTrackingMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(orderTrackingType, orderTrackingMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"order_tracking\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"order_tracking\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "order_dao: unable to insert into order_tracking")
	}

	if !cached {
		orderTrackingInsertCacheMut.Lock()
		orderTrackingInsertCache[key] = cache
		orderTrackingInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the OrderTracking.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *OrderTracking) Update(exec boil.Executor, columns boil.Columns) error {
	var err error
	key := makeCacheKey(columns, nil)
	orderTrackingUpdateCacheMut.RLock()
	cache, cached := orderTrackingUpdateCache[key]
	orderTrackingUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			orderTrackingAllColumns,
			orderTrackingPrimaryKeyColumns,
		)
		if len(wl) == 0 {
			return errors.New("order_dao: unable to update order_tracking, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"order_tracking\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, orderTrackingPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(orderTrackingType, orderTrackingMapping, append(wl, orderTrackingPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err = exec.Exec(cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "order_dao: unable to update order_tracking row")
	}

	if !cached {
		orderTrackingUpdateCacheMut.Lock()
		orderTrackingUpdateCache[key] = cache
		orderTrackingUpdateCacheMut.Unlock()
	}

	return nil
}

// UpdateAll updates all rows with the specified column values.
func (q orderTrackingQuery) UpdateAll(exec boil.Executor, cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.Exec(exec)
	if err != nil {
		return errors.Wrap(err, "order_dao: unable to update all for order_tracking")
	}

	return nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o OrderTrackingSlice) UpdateAll(exec boil.Executor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("order_dao: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), orderTrackingPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"order_tracking\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, orderTrackingPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "order_dao: unable to update all in orderTracking slice")
	}

	return nil
}

// Delete deletes a single OrderTracking record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *OrderTracking) Delete(exec boil.Executor) error {
	if o == nil {
		return errors.New("order_dao: no OrderTracking provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), orderTrackingPrimaryKeyMapping)
	sql := "DELETE FROM \"order_tracking\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "order_dao: unable to delete from order_tracking")
	}

	return nil
}

// DeleteAll deletes all matching rows.
func (q orderTrackingQuery) DeleteAll(exec boil.Executor) error {
	if q.Query == nil {
		return errors.New("order_dao: no orderTrackingQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.Exec(exec)
	if err != nil {
		return errors.Wrap(err, "order_dao: unable to delete all from order_tracking")
	}

	return nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o OrderTrackingSlice) DeleteAll(exec boil.Executor) error {
	if len(o) == 0 {
		return nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), orderTrackingPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"order_tracking\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, orderTrackingPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "order_dao: unable to delete all from orderTracking slice")
	}

	return nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *OrderTracking) Reload(exec boil.Executor) error {
	ret, err := FindOrderTracking(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *OrderTrackingSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := OrderTrackingSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), orderTrackingPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"order_tracking\".* FROM \"order_tracking\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, orderTrackingPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "order_dao: unable to reload all in OrderTrackingSlice")
	}

	*o = slice

	return nil
}

// OrderTrackingExists checks if the OrderTracking row exists.
func OrderTrackingExists(exec boil.Executor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"order_tracking\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "order_dao: unable to check if order_tracking exists")
	}

	return exists, nil
}

// Exists checks if the OrderTracking row exists.
func (o *OrderTracking) Exists(exec boil.Executor) (bool, error) {
	return OrderTrackingExists(exec, o.ID)
}
